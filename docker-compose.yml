version: "3"

services:
  app:
    build:
      context: .
    ports:
      - "80:80"
    volumes:
      - .:/app
      - static:/app/static
    command: >
      sh -c "python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:80"
    env_file:
      - .env

  telegram-bot:
    build:
      context: .
    # ports:
    #   - "8000:8000"
    volumes:
      - .:/app
    command: >
      sh -c "python3 manage.py initiate_telegram_bot"
    env_file:
      - .env
  cache:
    image: memcached
    ports:
      - "11211:11211"
    entrypoint:
      - memcached
      - -m 64

  db:
    image: postgres:10-alpine
    restart: on-failure
    volumes:
      - pgdata:/var/lib/postgresql/data/
    env_file:
      - .env

  redis:
    image: redis:alpine

  rabbit:
    hostname: rabbit
    restart: on-failure
    image: rabbitmq:3-management
    env_file:
      - .env
    ports:
      - "5672:5672"
      - "15672:15672"

  celery:
    build: .
    restart: always
    command: celery -A plutus worker -l info
    env_file:
      - .env
    depends_on:
      - db
      - rabbit

#  sentry:
#    image: sentry
#    links:
#      - redis
#      - db
#    ports:
#      - 9000:9000
#    environment:
#      SENTRY_SECRET_KEY: "!!!SECRET!!!"
#      SENTRY_POSTGRES_HOST: db
#      SENTRY_DB_USER: postgres
#      SENTRY_DB_PASSWORD: supersecretpassword
#      SENTRY_REDIS_HOST: redis
#
#  cron:
#    image: sentry
#    links:
#      - redis
#      - db
#    command: "sentry run cron"
#    environment:
#      SENTRY_SECRET_KEY: "!!!SECRET!!!"
#      SENTRY_POSTGRES_HOST: db
#      SENTRY_DB_USER: postgres
#      SENTRY_DB_PASSWORD: supersecretpassword
#      SENTRY_REDIS_HOST: redis
#
#  worker:
#    image: sentry
#    links:
#      - redis
#      - db
#    command: "sentry run worker"
#    environment:
#      SENTRY_SECRET_KEY: "!!!SECRET!!!"
#      SENTRY_POSTGRES_HOST: db
#      SENTRY_DB_USER: postgres
#      SENTRY_DB_PASSWORD: supersecretpassword
#      SENTRY_REDIS_HOST: redis

volumes:
  pgdata: { }
  static: { }
